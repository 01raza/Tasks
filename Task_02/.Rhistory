hi
install.packages("swirl")
library(swirl)
swril()
install.packages("swirl")
library(swirl)
swirl(output:1,2)
swirl(1,2,3)
install.packages("swirl")
library(swirl)
library(swirl)
swirl()
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
data(cars)
help.search()
library(swirl)
swirl()
getwd()
1s()
1s()
ls()
x<-9
ls()
dir()
?list.files
args(list.files())
args(list.files)
getwd()<-"old.dir"
old.dir<-getwd()
dir.create(testdir)
dir.create()
args(dir.create)
dir.create("testdir")
setwd()
setwd("testdir")
file.create("mytest.R")
getwd()
ls()
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R" to "mytest2.R")
arug(file.rename)
args(file.rename)
file.rename("mytest.R","mytest2.R")
info(file.copy)
info(file.copy())
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
dir.create
?dir.create
dir.create("testdir2") file.path("testdir3")
dir.create("testdir2") file.path("testdir3")
dir.create("testdir2") file.path("testdir3")
dir.create("testdir2") file.path("testdir3")
dir.create("testdir2"),file.path("testdir3")
dir.create("testdir2") and file.path("testdir3")
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3')
info()
dir.create(file.path('testdir2', 'testdir3')
testdir2
dir.create(file.path('testdir2', 'testdir3')
folder1
dir.create(file.path('testdir2', 'testdir3')
mk
dir.create(file.path('testdir2', 'testdir3')
dir.create(file.path("testdir2","testdir3")
dir.create(file.path("testdir2","testdir3")
info(dir.create)
info(dir.create)
dir.create(file.path("testdir2","testdir3")
jjijo
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3", recursive=true))
dir.create(file.path("testdir2","testdir3", recursive=TRUE))
dir.create(file.path("testdir2","testdir3", recursive=TRUE))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd
setwd(old.dir)
2
library(swirl)
swirl()
2
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.remove("mytest.R")
file.remove("mytest.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
2
print("s3j")
library(swirl)
swirl()
play()
5 %% 4
6 %% 3
3 %% 1
57%%7
nxt()
remainder <- function(num, divisor) {
ans<-num %% divisor
return(ans)
}
submit()
remainder <- function(num, divisor) {
divisor<-2
ans<-num %% divisor
return(ans)
}
submit()
remainder <- function(num, divisor = 2) {
num %% divisor
}
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
evaluate <- function(func, dat){
func (dat)
}
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(func(c(1.4,3.6,7.9,8.8)))
some_function <- function(func){
func(2, 4)
}
evaluate(sd(c(1.4,3.6,7.9,8.8)))
evaluate(cd,c(1.4,3.6,7.9,8.8)
)
evaluate(cd,c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(x,c(8,4,0))
evaluate(function(x),c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
paste()
?paste
paste("Programming", "is", "fun!")
telegram <- function(...){
paste(START,...,STOP)
}
SUBMIT()
submit()
telegram <- function(...){
paste("START",...,"STOP")
}
submit()
telegram <- function(...){
paste("START",...,"STOP")
}
submit()
telegram("mid")
mad_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs(place=beckley,adjective=smart,noun=he)
mad_libs(place="beckley",adjective="smart",noun="he")
%p% <- function(x,y){
paste("x"", "right")
}
%p% <- function(x,y){
paste("x"", "y")
}
"%p%" <- function(left, right){
paste(left, right)
}
submit()
"%p%"("I","love","R")
%p%("I","love","R!")
"%p%"("I","love","R!")
"%p%"("I","love R!")
"%p%"("I","love")"%p%"("love", "R!")
"%p%"("I","%p%"("love", "R!"))
"'I' %p% 'love' %p% 'R!'"
'I' %p% 'love' %p% 'R!'
data(cars)
help
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(dist ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(dist ~ speed, cars)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "myplot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(col=2, cars)
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
?points
plot(cars, pch=2)
data(mtcars)
play()
dim(mtcars)
head(mtcars)
nxt()
?boxplot
boxplot(mpg~cyl,mtcars)
hist(mtcars$mpg)
setwd('C:\\users\\Raza\\Desktop\\Evolution\\Tasks\\Task_02')
Data <- read.csv("http://jonsmitchell.com/data/beren.csv",stringsAsFactors=F)
write.csv(Data,"rawdata.csv",quote=F)
length(Data)
nrow(Data)
ncol(Data)
print(Data)
head(Data)
Data[1,]
Data[2,]
Data[1:3,]
Data[1:3,4]
Data[1:5, 1:3]
Data[257, 1:3]
Feeds<-which(Data[,9]=="bottle")
berenMilk <- Data[Feeds,]
head(berenMilk)
nrow(berenMilk)
print(berenMilk)
### There are 323 rows in the berenMilk and reach row present the bottle event.
Feeds<-which(Data[,"event"]=="bottle")
berenMilk1<-Data[Feeds,]
Feeds<-which(Data$event=="bottle")
berenMilk2<-Data[Feeds,]
### Is all the 3 ways generated same results ?
berenMilk == berenMilk1
berenMilk1 == berenMilk2
berenMilk == berenMilk2
### I get TRUE for all three so i'm convinced that they are same.
dayID<- apply(Data,1,function(x)paste(x[1:3],collapse="-"))
dateID<- sapply(dayID,as.Date,format="%Y-%m-%d",origin="2019-04-18")
Data$age<- dateID - dateID[which(Data$event=="birth")]
head(Data)
beren2 <- Data
beren3 <- beren2[order(beren2$age),]
head(Data)
head(beren2)
head(beren3)
write.csv(beren3,"berennew.csv",quote=F,row.names=FALSE)
### Task 2b
### Hypothesis 1 is not appropriate because we don't have Beren weight for each day.
### In Hypothesis 2 both the data are independent of each other.
Feeds<-which(beren3$event=="bottle")
avgMilk<-mean(beren3$value[Feeds])
print(avgMilk)
### What are the u ni t s f o r t h i s avgMilk value ?
### oz
### Why did I u se the value column from the beren3 o b j e c t ? What i s that?
### It is the amount of milk given.
### What does the s e t o f s q u a r e b r a c k e t s with  Feeds i n s i d e i t do h e r e ? I s i t imp o r t an t ? Why?
###  It is important because it will instruct R to get mean  of the value of rows in the object feed.
avgFeed <-tapply(beren3$value[Feeds],beren3$age[Feeds],mean)
avgFeed
varFeed<-tapply(beren3$value[Feeds],beren3$age[Feeds],var)
varFeed
totalFeed<-tapply(beren3$value[Feeds],beren3$age[Feeds],sum)
totalFeed
numFeeds<-tapply(beren3$value[Feeds],beren3$age[Feeds],length)
numFeeds
?cor
cor(beren3$value[Feeds],beren3$age[Feeds])
cor.test(beren3$value[Feeds],beren3$age[Feeds])
berenCor<-cor.test(beren3$value[Feeds],beren3$age[Feeds])
summary(berenCor)
berenANOVA <- aov(beren3$value[Feeds]~beren3$age[Feeds])
berenANOVA
boxplot(beren3$value[Feeds]~beren3$caregiver[Feeds],xlab="who gave the bottle",ylab="amount of milk consumed (oz)")
?par
par (las=1,mar=c(5,5,1,1),mgp=c(2,0.5,0),tck =-0.01)
plot(as.numeric(names(totalFeed)),totalFeed,type="b",pch=16,xlab="age in days",ylab="ounces of milk")
abline(h=mean(totalFeed),lty=2,col="red")
pdf("r02b-totalMilkByDay.pdf",height=4,width=4)
par(las=1,mar=c(5,5,1,1),mgp=c(2,0.5,0),tck=-0.01)
plot(as.numeric(names(totalFeed)),totalFeed,type="b",pch=16,xlab="age in days",ylab="ounces of milk")
abline(h=mean(totalFeed),lty=2,col="red")
dev.off()
source("http://jonsmitchell.com/code/plotFxn02b.R")
pdf("r02b-cumulativeMilkByTime.pdf",height=8,width=8)
source("http://jonsmitchell.com/code/plotFxn02b.R")
dev.off()
unique(beren3$event)
###extra credit
####
Naps <- which(beren3$event=="nap")
beren4 <- beren3[Naps,]
startHour<-(beren4$start_hour)
startMin<-(beren4$start_minute)
stopHour<-(beren4$end_hour)
stopMin<-(beren4$end_minute)
startHour
startMin
stopMin
stopHour
beren4$sleepTime<-((stopHour-startHour)*60)+(stopMin-startMin)
beren4
totalNap<-tapply(beren4$sleepTime,beren4$age,sum)
totalNap
par(las=1,mar=c(5,5,1,1),mgp=c(2,0.5,0),tck=-0.01)
plot(as.numeric(names(totalNap)),totalNap,type="b",pch=16,xlab="age in days",ylab="Nap time in minutes")
cor.test(beren4$start_hour,beren4$sleepTime)
plot(as.numeric(names(totalNap)),totalNap,type="b",pch=16,xlab="age in days",ylab="Nap time in minutes")
plot(as.numeric(names(totalNap)),totalNap,type="b",pch=16,xlab="age in days",ylab="Nap time in minutes")
plot(as.numeric(names(totalNap)),totalNap,type="b",pch=16,xlab="age in days",ylab="Nap time in minutes")
plot(as.numeric(names(totalNap)),totalNap,type="b",pch=16,xlab="age in days",ylab="Nap time in minutes")
