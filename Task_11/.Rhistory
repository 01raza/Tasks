births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
}
plot(trees[[5]])
str(trees)
s<-()
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
s[[i]]<-births[i]
}
str(trees)
s<-c()
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
s[[i]]<-births[i]
}
?sapply
plot(r, tips)
trees<-vector("list",1)
births<-c()
fractions<-c()
r<-c()
s<-c()
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
s[[i]]<-births[i]
}
str(trees)
plot(trees[[5]])
trees[[2]]$tip.label
?sapply
### Question 4
tips<-sapply(trees, Ntip)
plot(r, tips)
plot(r, tips)
abline()
?abline
plot(r, tips)
abline(tips, r)
abline(r, tips)
abline(r, tips)
abline(r, tips)
plot(r, tips)
abline(r, tips)
tips
trees[[2]]$tip.label
trees[[1]]$tip.label
trees[[99]]$tip.label
trees[[100]]$tip.label
### Question 5
plot(trees, type="fan")
### Question 5
plot(trees[[5]], type="fan")
tips<-log(sapply(trees, Ntip))
tips
plot(r, tips)
plot(r, tips, xlab= diversification, ylab= log of number of tips)
plot(r, tips, xlab= "diversification, ylab= "log of number of tips")
plot(r, tips, xlab= "diversification", ylab= "log of number of tips")
?plot
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=16)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=21)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=13)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=9)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=15)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=16)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=17)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=18)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="orange", pch=18)
lm(formula = tips ~ r)
abline(lm(tips ~ r))
r
tips
plot(tips,r, xlab= "diversification", ylab= "log of number of tips", col="orange", pch=18)
plot(tips,r, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
abline(lm(tips ~ r))
cor(tips,r)
r1<-unlist(r)
plot(tips,r1, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
cor(tips,r1)
plot(tips,r1, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
abline(lm(tips ~ r1))
plot(tips,r1, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
abline(lm(tips ~ r1))
lm(tips ~ r1))
lm(tips ~ r1)
abline(3.191, 2.717)
plot(tips,r1, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
abline(3.191, 2.717)
s1<-unlist(s)
s1
compute.brlen(trees)
class(trees)
trees$edge.length
trees<-vector("list",1)
births<-c()
fractions<-c()
r<-c()
s<-c()
branch<-c()
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
s[[i]]<-births[i]
branch[[i]]<-trees[[i]]$edge.length
}
branch
trees<-vector("list",1)
births<-c()
fractions<-c()
r<-c()
s<-c()
branch<-c()
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
s[[i]]<-births[i]
branch[[i]]<-mean(trees[[i]]$edge.length)
}
branch
plot(branch,s1, xlab="Average branch length" , ylab= "speciaiton rate", col="orange", pch=18)
library(phytools)
trees<-vector("list",1)
births<-c()
fractions<-c()
r<-c()
s<-c()
branch<-c()
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
s[[i]]<-births[i]
branch[[i]]<-mean(trees[[i]]$edge.length)
}
str(trees)
plot(trees[[5]])
trees[[100]]$tip.label
?sapply
### Question 4
tips<-log(sapply(trees, Ntip))
tips
r1<-unlist(r)
plot(tips,r1, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
abline(lm(tips ~ r1))
cor(tips,r1)
### Question 5
s1<-unlist(s)
branch
plot(branch,s1, xlab="Average branch length" , ylab= "speciaiton rate", col="orange", pch=18)
abline(lm(branch ~ s1))
cor(branch,s1)
plot(branch,s1, xlab="Average branch length" , ylab= "speciaiton rate", col="orange", pch=18)
plot(branch,s1, xlab="Average branch length" , ylab= "speciaiton rate", col="orange", pch=1)
branch <-unlist(branch)
abline(lm(branch ~ s1))
cor(branch,s1)
plot(branch,s1, xlab="Average branch length" , ylab= "speciaiton rate", col="orange", pch=1)
sapply(trees, Ntips)
sapply(trees, Ntip)
### Question 7
Tree<-trees[[14]]
plot(Tree)
rates<-c()
traits<-vector("list",1)
rates<-c()
traits<-vector("list",1)
for(i in 1:100) {
rates[i]<- runif(1)
traits[[i]]<-fastBM(tree = Tree, sig2 = rates[i])
}
traits
rates
births
plot(tips,births, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
plot(tips,(births*fractions), xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
plot(tips,r, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
plot(mean(traits),rates)
mean(traits)
traits
mean(traits)
class(traits)
traits<-unlist(traits)
class(traits)
traits
mean(traits)
for(i in 1:100) {
rates[i]<- runif(1)
traits[[i]]<-fastBM(tree = Tree, sig2 = rates[i])
traits1[[i]]<-mean(traits[[i]])
}
plot(Tree)
rates<-c()
traits<-vector("list",1)
for(i in 1:100) {
rates[i]<- runif(1)
traits[[i]]<-fastBM(tree = Tree, sig2 = rates[i])
traits1[[i]]<-mean(traits[[i]])
}
traits1<-c()
for(i in 1:100) {
rates[i]<- runif(1)
traits[[i]]<-fastBM(tree = Tree, sig2 = rates[i])
traits1[[i]]<-mean(traits[[i]])
}
traits1
plot(traits1, rates)
rates<-c()
traits<-vector("list",1)
meantraits<-c()
for(i in 1:100) {
rates[i]<- runif(1)
traits[[i]]<-fastBM(tree = Tree, sig2 = rates[i])
meantraits[[i]]<-mean(traits[[i]])
}
plot(mean(traits),rates)
traits<-unlist(traits)
class(traits)
traits1
plot(meantraits, rates)
cor(meantraits, rates)
meantraits<-unlist(meantraits)
cor(meantraits, rates)
plot(meantraits, rates)
rates<-c()
traits<-vector("list",1)
meantraits<-c()
vartraits<-c()
for(i in 1:100) {
rates[i]<- runif(1)
traits[[i]]<-fastBM(tree = Tree, sig2 = rates[i])
meantraits[[i]]<-mean(traits[[i]])
vartraits[[i]]<-var(traits[[i]])
}
plot(mean(traits),rates)
traits<-unlist(traits)
class(traits)
traits1
vartraits<-unlist(meantraits)
plot(vartraits, rates)
cor(vartraits, rates)
cor(traits[[1]], traits[[2]])
### Question 10
cor(traits[1], traits[2])
trait[1]
traits[1]
traits[2]
traitMat<-cbind(traits[[1]], traits[[4]])
traitMat
traitMat<-cbind(traits[[1]], traits[[2]])
traitMat
cor(vartraits, rates)
cor(meantraits, rates)
meantraits<-unlist(meantraits)
cor(meantraits, rates)
vartraits<-unlist(vartraits)
cor(vartraits, rates)
### Question 7
which.max(trees)
### Question 7
which.max(Ntips)
### Question 7
which.max(tips)
Tree<-trees[[which.max(tips)]]
plot(Tree)
rates<-c()
traits<-vector("list",1)
meantraits<-c()
vartraits<-c()
for(i in 1:100) {
rates[i]<- runif(1)
traits[[i]]<-fastBM(tree = Tree, sig2 = rates[i])
meantraits[[i]]<-mean(traits[[i]])
vartraits[[i]]<-var(traits[[i]])
}
plot(mean(traits),rates)
traits<-unlist(traits)
class(traits)
### Question 8
meantraits<-unlist(meantraits)
plot(meantraits, rates)
cor(meantraits, rates)
install.packages(ids)
install.packages("ids")
library(ids)
Relabel <- adjective_animal(31, max_len=c(10,15))
Relabel
Relabel <- adjective_animal(31, max_len=c(10,15))
Relabel
Relabel <- adjective_animal(31, max_len=c(10,15))
Relabel
library('diversitree')
transition_0to1 <- 0.1
transition_1to0 <- 0.1
speciation_0 <- 0.2
extinction_0 <- 0.15
speciation_1 <- 0.4
extinction_1 <- 0.1
maxN <- 1e3
maxT <- 50
Pars <- c(speciation_0, speciation_1, extinction_0, extinction_1, transition_0to1, transition_1to0)
simTree <- tree.bisse(Pars, max.taxa = maxN, max.t = maxT)
install.packages('diversitree')
library('diversitree')
transition_0to1 <- 0.1
transition_1to0 <- 0.1
speciation_0 <- 0.2
extinction_0 <- 0.15
speciation_1 <- 0.4
extinction_1 <- 0.1
maxN <- 1e3
maxT <- 50
Pars <- c(speciation_0, speciation_1, extinction_0, extinction_1, transition_0to1, transition_1to0)
simTree <- tree.bisse(Pars, max.taxa = maxN, max.t = maxT)
str(simTree)
stateTable <- table(simTree$tip.state)
stateTable / sum(stateTable)
Frequencies <- c('State 0', 'State 1')
Colors <- c('red', 'black')
Data <- matrix(c(0.68, 0.69, 0.57, 0.647, 0.642, 0.43, 0.32, 0.3, 0.43, 0.35, 0.35, 0.568), nrow = 2, ncol = 6, byrow=TRUE)
Data
Difference <- c(0.15, 0.1, 0.05, 0.03, 0.02, 0.01)
Freq1 <- c(0.32, 0.3, 0.43, 0.35, 0.35, 0.568)
Freq0 <- c(0.68, 0.69, 0.57, 0.647, 0.642, 0.43)
barplot(Data, names.arg=Difference,
main = 'Changes in Frequency of States based on Variation in R Values',
xlab = 'Difference in Diversification Rate',
ylab = 'Frequency',
beside=TRUE,
col = c('red', 'black')
)
legend('topright', Frequencies, fill = Colors)
legend('top', Frequencies, fill = Colors)
Frequencies <- c('State 0', 'State 1')
Colors <- c('orange', 'green')
Data <- matrix(c(0.82, 0.8, 0.96, 0.85, 0.63, 0.9, 0.926, 0.923, 0.959, 0.955, 0.945, 0.968, 0.977, 0.963, 0.978, 0.984, 0.973, 0.18, 0.2, 0.04, 0.14, 0.37, 0.088, 0.074, 0.077, 0.041, 0.045, 0.055, 0.032, 0.023, 0.037, 0.022, 0.016, 0.027), nrow = 2, ncol = 17, byrow=TRUE)
Data
barplot(Data, names.arg=Difference,
main='How Close to Zero State 1 Gets When Transition Rate is Nonzero',
xlab='Difference in Diversification Rate',
ylab='Frequencies',
col=c('orange', 'green')
)
legend('topright', Frequencies, fill = Colors)
legend('bottom', Frequencies, fill = Colors)
rnorm(5)
?rnorm
rnorm(100, mean = 5, var= 4)
rnorm(100, mean = 5)
rnorm(10, mean = 5)
rnorm(10, mean = 5, sd=2)
var(norm)
x<-rnorm(10, mean = 5, sd=2)
var(x)
mean(x)
x<-rnorm(100, mean = 5, sd=2)
var(x)
mean(x)
x<-rnorm(100, mean = 5, sd=2)
var(x)
mean(x)
x<-rnorm(100, mean = 5, sd=2)
var(x)
mean(x)
x<-rnorm(100, mean = 5, sd=16)
var(x)
mean(x)
x<-rnorm(100, mean = 5, sd=16)
var(x)
mean(x)
x<-rnorm(100, mean = 5, sd=16)
var(x)
mean(x)
x<-rnorm(100, mean = 5, sd=2)
var(x)
mean(x)
x<-rnorm(100, mean = 5, sd=2)
var(x)
mean(x)
rand(100,0,0.1)
runif(100,0,0.1)
y<-((x*5)+2)+runif(100,0,0.1)
y
plot(x,y)
library('meme')
?meme
u <- 'https://lh3.googleusercontent.com/3X6FNXp5av39izZlAEQUUn6S5V_01wEmejYZj7BqvoIf6lVZNY40ThEGzWtqpegxUif3=s168'
if (.Platform$OS.type == "windows") {
windowsFonts(
Impact = windowsFont("Impact"),
Courier = windowsFont("Courier")
)
}
pdf("memeee.pdf", height = 6, width = 6)
meme(u, "Species are not the only thing evolving", "R is evolving too!!", color='blue')
dev.off()
setwd('C:\\users\\Raza\\Desktop\\Evolution\\Tasks\\Task_11')
u <- 'https://lh3.googleusercontent.com/3X6FNXp5av39izZlAEQUUn6S5V_01wEmejYZj7BqvoIf6lVZNY40ThEGzWtqpegxUif3=s168'
if (.Platform$OS.type == "windows") {
windowsFonts(
Impact = windowsFont("Impact"),
Courier = windowsFont("Courier")
)
}
pdf("memeee.pdf", height = 6, width = 6)
meme(u, "Species are not the only thing evolving", "R is evolving too!!", color='blue')
dev.off()
if (.Platform$OS.type == "windows") {
windowsFonts(
Impact = windowsFont("Impact"),
Courier = windowsFont("Courier")
)
}
meme(u, "Species are not the only thing evolving", "R is evolving too!!", color='blue')
?meme
if (.Platform$OS.type == "windows") {
windowsFonts(
Impact = windowsFont("Impact"),
Courier = windowsFont("Courier")
)
}
meme(u, "Species are not the only thing evolving", "R is evolving too!!", color='blue', vjust=1, bgcolor='white')
?meme
meme(u, "Species are not the only thing evolving", "R is evolving too!!", size=10, color='blue', vjust=1, bgcolor='white')
meme(u, "Species are not the only thing evolving", "R is evolving too!!", size=2, color='blue', vjust=1, bgcolor='white')
meme(u,"R is evolving too!!", "Species are not the only thing evolving", size=1.8, color='blue', vjust=1, bgcolor='white')
pdf("meme.pdf", height = 6, width = 6)
if (.Platform$OS.type == "windows") {
windowsFonts(
Impact = windowsFont("Impact"),
Courier = windowsFont("Courier")
)
}
meme(u,"R is evolving too!!", "Species are not the only thing evolving", size=1.8, color='blue', vjust=1, bgcolor='white')
dev.off()
pdf("meme.pdf", height = 6, width = 6)
if (.Platform$OS.type == "windows") {
windowsFonts(
Impact = windowsFont("Impact"),
Courier = windowsFont("Courier")
)
}
meme(u,"R is evolving too!!", "Species are not the only thing evolving", size=1.8, color='blue', vjust=1, bgcolor='white')
dev.off()
if (.Platform$OS.type == "windows") {
windowsFonts(
Impact = windowsFont("Impact"),
Courier = windowsFont("Courier")
)
}
meme(u,"R is evolving too!!", "Species are not the only thing evolving", size=1.8, color='blue', vjust=1, bgcolor='white')
pdf("meme.pdf", height = 6, width = 6)
meme(u,"R is evolving too!!", "Species are not the only thing evolving", size=1.8, color='blue', vjust=1, bgcolor='white')
dev.off()
png("meme1.png", height = 6, width = 6)
if (.Platform$OS.type == "windows") {
windowsFonts(
Impact = windowsFont("Impact"),
Courier = windowsFont("Courier")
)
}
meme(u,"R is evolving too!!", "Species are not the only thing evolving", size=1.8, color='blue', vjust=1, bgcolor='white')
dev.off()
x<-rnorm(100, mean = 5, sd=2)
var(x)
mean(x)
y<-((x*5)+2)+runif(100,0,0.1)
plot(x,y)
abline(lm(y~x), col='orange')
coef(lm(y~x))
setwd('C:\\users\\Raza\\Desktop\\Evolution\\Tasks\\Task_11')
pdf('graph1.pdf', height = 4, width = 4)
plot(x,y)
abline(lm(y~x), col='orange')
dev.off()
coef(lm(y~x))
z <- c()
x <- rnorm(100, mean=5, sd=2)
for (i in 1:100) {
z[i] <- runif(1)
y <- (x * z[i]) + 2 + (rnorm(100, 0:0.1))
l <- coef(lm(z[1:100]~y))
}
pdf('graph2.pdf', height = 4, width = 4)
plot(z[1:100], y)
abline(lm(y~z[1:100]))
dev.off()
pdf('graph3.pdf', height = 4, width = 4)
plot(c(z, -0.029))
dev.off()
