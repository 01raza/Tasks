evaluate <- function(func, dat){
func (dat)
}
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(func(c(1.4,3.6,7.9,8.8)))
some_function <- function(func){
func(2, 4)
}
evaluate(sd(c(1.4,3.6,7.9,8.8)))
evaluate(cd,c(1.4,3.6,7.9,8.8)
)
evaluate(cd,c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(x,c(8,4,0))
evaluate(function(x),c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
paste()
?paste
paste("Programming", "is", "fun!")
telegram <- function(...){
paste(START,...,STOP)
}
SUBMIT()
submit()
telegram <- function(...){
paste("START",...,"STOP")
}
submit()
telegram <- function(...){
paste("START",...,"STOP")
}
submit()
telegram("mid")
mad_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs(place=beckley,adjective=smart,noun=he)
mad_libs(place="beckley",adjective="smart",noun="he")
%p% <- function(x,y){
paste("x"", "right")
}
%p% <- function(x,y){
paste("x"", "y")
}
"%p%" <- function(left, right){
paste(left, right)
}
submit()
"%p%"("I","love","R")
%p%("I","love","R!")
"%p%"("I","love","R!")
"%p%"("I","love R!")
"%p%"("I","love")"%p%"("love", "R!")
"%p%"("I","%p%"("love", "R!"))
"'I' %p% 'love' %p% 'R!'"
'I' %p% 'love' %p% 'R!'
data(cars)
help
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(dist ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(dist ~ speed, cars)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "myplot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(col=2, cars)
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
?points
plot(cars, pch=2)
data(mtcars)
play()
dim(mtcars)
head(mtcars)
nxt()
?boxplot
boxplot(mpg~cyl,mtcars)
hist(mtcars$mpg)
library("ape")
library("maps")
library("phytools")
library("coala")
model <- coala::coal_model (sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +
coala::feat_mutation (10) +
coala::feat_recombination (10) +
coala::sumstat_trees() +
coala::sumstat_nucleotide_div ()
model
stats <- simulate (model, nsim = 1)
Diversity <- stats$pi
Diversity
### The numbers are not same, different due to recombination and mutation.
Nloci <- length (stats$trees)
Nloci
t1 <- read.tree(text=stats$trees [[1]][1])
plot (t1)
axisPhylo ()
### 6. Effective population size changes with its environment.Also the individuals in the population are born and dying.
Agel <- max (node.height(t1))
Agel
t2 <- read.tree (text=stats$trees [[2]][1])
plot (t2)
axisPhylo()
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
t1_1 <- read.tree (text=stats$trees [[1]][1])
t1_2 <- read.tree (text=stats$trees [[1]][2])
par (mfrow=c(1,2))
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
?coal_model
vignette(coala-intro)
vignette(coala-intro, coala)
vignette("coala-intro", coala)
comparePhylo(t1_1, t1_2)
library("ape")
library("maps")
library("phytools")
library("coala")
model <- coala::coal_model (sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +
coala::feat_mutation (10) +
coala::feat_recombination (10) +
coala::sumstat_trees() +
coala::sumstat_nucleotide_div ()
model
stats <- simulate (model, nsim = 1)
Diversity <- stats$pi
Diversity
### The numbers are not same, different due to recombination and mutation.
Nloci <- length (stats$trees)
Nloci
t1 <- read.tree(text=stats$trees [[1]][1])
plot (t1)
axisPhylo ()
### 6. Effective population size changes with its environment.Also the individuals in the population are born and dying.
Agel <- max (node.height(t1))
Agel
t2 <- read.tree (text=stats$trees [[2]][1])
plot (t2)
axisPhylo()
###
par (mfrow=c(1,2))
plot (t1)
axisPhylo()
plot (t2)
axisPhylo()
# The plots do not match.
comparePhylo(t1, t2)
t1_1 <- read.tree (text=stats$trees [[1]][1])
t1_2 <- read.tree (text=stats$trees [[1]][2])
par (mfrow=c(1,2))
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
comparePhylo(t1_1, t1_2)
t1_1
t1_2
comparePhylo(t1_1, t1_2)
plot(comparePhylo(t1_1, t1_2))
?comparePhylo
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.multiPhylo (outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
model <- coala::coal_model (sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +
coala::feat_mutation (10) +
coala::feat_recombination (10) +
coala::sumstat_trees() +
coala::sumstat_nucleotide_div ()
model
stats <- simulate (model, nsim = 1)
stats
t1_1 <- read.tree (text=stats$trees [[1]][1])
t1_2 <- read.tree (text=stats$trees [[1]][2])
par (mfrow=c(1,2))
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
comparePhylo(t1_1, t1_2)
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.multiPhylo (outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.multiPhylo (outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
model3 <- coala::coal_model(10, 50)
coala::feat_mutation(coala::par_prior("theta", sample.init(100, 1))) + coala::sumstat_nucleotide_div()
stats <- simulate (model3, nsim = 0)
mean_pi <- sapply (stats, function (x) mean (x$pi))
theta <- sapply (stats, function (x) x$pars [["theta"]])
theta
mean_pi
library(learnPopGen)
?coalescent.plot
?coalescent.plot
coalescent.plot(n=20, ngen=20, colors=NULL)
coalescent.plot(n=10, ngen=20, colors=NULL)
coalescent.plot(n=10, ngen=40, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=30, colors=NULL)
coalescent.plot(n=15, ngen=20, colors=NULL)
coalescent.plot(n=15, ngen=20, colors=NULL)
coalescent.plot(n=3, ngen=20, colors=NULL)
coalescent.plot(n=3, ngen=20, colors=NULL)
coalescent.plot(n=7, ngen=20, colors=NULL)
setwd('~/Desktop/Evolution/Tasks/Task_05')
library(learnPopGen)
?coalescent.plot
setwd('~/Desktop/Evolution/Tasks/Task_05')
library(learnPopGen)
?coalescent.plot
setwd('C:\\users\\Raza\\Desktop\\Evolution\\Tasks\\Task_05')
pdf('r05-plot1.pdf', height=6, width=6)
coalescent.plot(n=5, ngen=10, colors=NULL)
dev.off()
coalescent.plot(n=5, ngen=10, colors=NULL)
pdf('r05-plot2.pdf', height=6, width=6)
coalescent.plot(n=10, ngen=5, colors=NULL)
dev.off()
pdf('r05-plot3.pdf', height=6, width=6)
coalescent.plot(n=10, ngen=10, colors=NULL)
dev.off()
coalescent.plot(n=10, ngen=10, colors=NULL)
coalescent.plot(n=10, ngen=10, colors=NULL)
coalescent.plot(n=10, ngen=10, colors=NULL)
coalescent.plot(n=10, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=10, ngen=10, colors=NULL)
coalescent.plot(n=10, ngen=10, colors=NULL)
coalescent.plot(n=10, ngen=10, colors=NULL)
?coalescent.plot
t1_1 <- read.tree (text=stats$trees [[1]][1])
t1_2 <- read.tree (text=stats$trees [[1]][2])
par (mfrow=c(1,2))
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
comparePhylo(t1_1, t1_2)
library("ape")
library("maps")
library("phytools")
library("coala")
par (mfrow=c(1,2))
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
comparePhylo(t1_1, t1_2)
t1_1 <- read.tree (text=stats$trees [[1]][1])
t1_2 <- read.tree (text=stats$trees [[1]][2])
par (mfrow=c(1,2))
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
comparePhylo(t1_1, t1_2)
t1_1 <- read.tree (text=stats$trees [[1]][1])
model <- coala::coal_model (sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +
coala::feat_mutation (10) +
coala::feat_recombination (10) +
coala::sumstat_trees() +
coala::sumstat_nucleotide_div ()
model
stats <- simulate (model, nsim = 1)
Diversity <- stats$pi
Diversity
### The numbers are not same, different due to recombination and mutation.
Nloci <- length (stats$trees)
Nloci
t1 <- read.tree(text=stats$trees [[1]][1])
plot (t1)
axisPhylo ()
### 6. Effective population size changes with its environment.Also the individuals in the population are born and dying.
Agel <- max (node.height(t1))
Agel
t2 <- read.tree (text=stats$trees [[2]][1])
plot (t2)
axisPhylo()
t1_1 <- read.tree (text=stats$trees [[1]][1])
t1_2 <- read.tree (text=stats$trees [[1]][2])
par (mfrow=c(1,2))
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
comparePhylo(t1_1, t1_2)
t1_2 <- read.tree (text=stats$trees [[1]][3])
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
t1_2 <- read.tree (text=stats$trees [[1]][10])
par (mfrow=c(1,2))
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
comparePhylo(t1_1, t1_2)
Nloci <- length (stats$trees)
Nloci
t1 <- read.tree(text=stats$trees [[1]][1])
plot (t1)
axisPhylo ()
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.multiPhylo (outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
model2 <- coal_model(sample_size=5, loci_number=10, loci_length=500, ploidy=2) +
feat_mutation(10) +
feat_recombination(20) +
sumstat_trees() +
sumstat_nucleotide_div()
stats <- simulate (model2, nsim = 1)
Diversity <- stats$pi
Nloci <- length (stats$trees)
t1 <- read.tree(text=stats$trees [[1]][1])
plot (t1)
axisPhylo ()
model <- coal_model(sample_size=5, loci_number=10, loci_length=500, ploidy=2) +
feat_mutation(10) +
feat_recombination(20) +
sumstat_trees() +
sumstat_nucleotide_div()
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.multiPhylo (outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
model3 <- coal_model(10, 50) +
feat_mutation(par_prior('theta', sample.int(100, 1))) +
sumstat_nucleotide_div()
stats <- simulate(model3, nsim = 40)
mean_pi <- sapply(stats, function(x) mean(x$pi))
theta <- sapply(stats, function(x) x$pars[['theta']])
pdf("r05-Model3Graph.pdf", height=6, width=6)
plot(mean_pi)
plot(theta)
plot(mean_pi, theta, xlab='Diversity', ylab='Mutation Rate', pch=16, cex=1.3, col='red', main='Diversity due to Varied Mutation Rate')
abline(lm(mean_pi ~ theta), col='black')
dev.off()
install.packages('phyclust')
library('phyclust')
activate_ms(priority = 100)
activate_msms(priority = 500, download = TRUE)
model4 <- coal_model(c(13, 18), loci_number = 10, loci_length = 1000, ploidy = 2) +
feat_selection(10, time = 1, population = 1) +
feat_selection(25, time = 1, population = 2) +
feat_size_change(0.5,
population = 1,
time = '1',
locus_group = 'all') +
feat_size_change(0.1,
population = 2,
time = '2',
locus_group = 'all') +
feat_migration(1.2,
pop_to = 1,
pop_from = 2,
symmetric = FALSE, time = '3', locus_group = 'all') +
feat_mutation(10) +
sumstat_trees() +
sumstat_nucleotide_div()
check_model(model4)
list_simulators()
stat2 <- simulate(model4, nsim = 40)
Diversity2 <- stat2$pi
Diversity2
stat2 <- simulate(model4, nsim = 40)
check_model(model4)
activate_msms(priority = 500, download = TRUE)
activate_msms(jar = NULL, java = NULL, priority = 400, download = TRUE)
activate_ms(priority = 400)
activate_msms(jar = NULL, java = NULL, priority = 400, download = TRUE)
activate_msms(jar = NULL, java = NULL, priority = 200, download = FALSE)
activate_ms(priority = 200)
activate_msms(jar = NULL, java = NULL, priority = 200, download = FALSE)
activate_msms(java = NULL, priority = 200, download = TRUE)
model4 <- coal_model(c(13, 18), loci_number = 10, loci_length = 1000, ploidy = 2) +
feat_selection(10, time = 1, population = 1) +
feat_selection(25, time = 1, population = 2) +
feat_size_change(0.5,
population = 1,
time = '1',
locus_group = 'all') +
feat_size_change(0.1,
population = 2,
time = '2',
locus_group = 'all') +
feat_migration(1.2,
pop_to = 1,
pop_from = 2,
symmetric = FALSE, time = '3', locus_group = 'all') +
feat_mutation(10) +
sumstat_trees() +
sumstat_nucleotide_div()
stat2 <- simulate(model4, nsim = 40)
library("ape")
library("maps")
library("phytools")
library("coala")
stat2 <- simulate(model4, nsim = 40)
