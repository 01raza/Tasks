}
submit()
telegram <- function(...){
paste("START",...,"STOP")
}
submit()
telegram("mid")
mad_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs(place=beckley,adjective=smart,noun=he)
mad_libs(place="beckley",adjective="smart",noun="he")
%p% <- function(x,y){
paste("x"", "right")
}
%p% <- function(x,y){
paste("x"", "y")
}
"%p%" <- function(left, right){
paste(left, right)
}
submit()
"%p%"("I","love","R")
%p%("I","love","R!")
"%p%"("I","love","R!")
"%p%"("I","love R!")
"%p%"("I","love")"%p%"("love", "R!")
"%p%"("I","%p%"("love", "R!"))
"'I' %p% 'love' %p% 'R!'"
'I' %p% 'love' %p% 'R!'
data(cars)
help
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(dist ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(dist ~ speed, cars)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "myplot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(col=2, cars)
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
?points
plot(cars, pch=2)
data(mtcars)
play()
dim(mtcars)
head(mtcars)
nxt()
?boxplot
boxplot(mpg~cyl,mtcars)
hist(mtcars$mpg)
library("ape")
library("maps")
library("phytools")
library("coala")
model <- coala::coal_model (sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +
coala::feat_mutation (10) +
coala::feat_recombination (10) +
coala::sumstat_trees() +
coala::sumstat_nucleotide_div ()
model
stats <- simulate (model, nsim = 1)
Diversity <- stats$pi
Diversity
### The numbers are not same, different due to recombination and mutation.
Nloci <- length (stats$trees)
Nloci
t1 <- read.tree(text=stats$trees [[1]][1])
plot (t1)
axisPhylo ()
### 6. Effective population size changes with its environment.Also the individuals in the population are born and dying.
Agel <- max (node.height(t1))
Agel
t2 <- read.tree (text=stats$trees [[2]][1])
plot (t2)
axisPhylo()
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
t1_1 <- read.tree (text=stats$trees [[1]][1])
t1_2 <- read.tree (text=stats$trees [[1]][2])
par (mfrow=c(1,2))
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
?coal_model
vignette(coala-intro)
vignette(coala-intro, coala)
vignette("coala-intro", coala)
comparePhylo(t1_1, t1_2)
library("ape")
library("maps")
library("phytools")
library("coala")
model <- coala::coal_model (sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +
coala::feat_mutation (10) +
coala::feat_recombination (10) +
coala::sumstat_trees() +
coala::sumstat_nucleotide_div ()
model
stats <- simulate (model, nsim = 1)
Diversity <- stats$pi
Diversity
### The numbers are not same, different due to recombination and mutation.
Nloci <- length (stats$trees)
Nloci
t1 <- read.tree(text=stats$trees [[1]][1])
plot (t1)
axisPhylo ()
### 6. Effective population size changes with its environment.Also the individuals in the population are born and dying.
Agel <- max (node.height(t1))
Agel
t2 <- read.tree (text=stats$trees [[2]][1])
plot (t2)
axisPhylo()
###
par (mfrow=c(1,2))
plot (t1)
axisPhylo()
plot (t2)
axisPhylo()
# The plots do not match.
comparePhylo(t1, t2)
t1_1 <- read.tree (text=stats$trees [[1]][1])
t1_2 <- read.tree (text=stats$trees [[1]][2])
par (mfrow=c(1,2))
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
comparePhylo(t1_1, t1_2)
t1_1
t1_2
comparePhylo(t1_1, t1_2)
plot(comparePhylo(t1_1, t1_2))
?comparePhylo
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.multiPhylo (outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
model <- coala::coal_model (sample_size = 5, loci_number = 10, loci_length = 500, ploidy = 2) +
coala::feat_mutation (10) +
coala::feat_recombination (10) +
coala::sumstat_trees() +
coala::sumstat_nucleotide_div ()
model
stats <- simulate (model, nsim = 1)
stats
t1_1 <- read.tree (text=stats$trees [[1]][1])
t1_2 <- read.tree (text=stats$trees [[1]][2])
par (mfrow=c(1,2))
plot (t1_1)
axisPhylo()
plot (t1_2)
axisPhylo()
comparePhylo(t1_1, t1_2)
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.multiPhylo (outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.phylo(outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
par (mfrow=c(1,1))
phytools::densityTree(outPhy)
for (locus in 1:Nloci) {
ntrees <- length (stats$trees [[locus]])
for (n in 1:ntrees) {
if (locus == 1 && n == 1) {
outPhy <- read.tree (text=stats$trees [[locus]][n])
}
else {
outPhy <- ape:::c.multiPhylo (outPhy, read.tree (text=stats$trees [[locus]][n]))
}
}
}
model3 <- coala::coal_model(10, 50)
coala::feat_mutation(coala::par_prior("theta", sample.init(100, 1))) + coala::sumstat_nucleotide_div()
stats <- simulate (model3, nsim = 0)
mean_pi <- sapply (stats, function (x) mean (x$pi))
theta <- sapply (stats, function (x) x$pars [["theta"]])
theta
mean_pi
library(learnPopGen)
?coalescent.plot
?coalescent.plot
coalescent.plot(n=20, ngen=20, colors=NULL)
coalescent.plot(n=10, ngen=20, colors=NULL)
coalescent.plot(n=10, ngen=40, colors=NULL)
coalescent.plot(n=5, ngen=10, colors=NULL)
coalescent.plot(n=5, ngen=30, colors=NULL)
coalescent.plot(n=15, ngen=20, colors=NULL)
coalescent.plot(n=15, ngen=20, colors=NULL)
coalescent.plot(n=3, ngen=20, colors=NULL)
coalescent.plot(n=3, ngen=20, colors=NULL)
coalescent.plot(n=7, ngen=20, colors=NULL)
setwd('~/Desktop/Evolution/Tasks/Task_05')
library(learnPopGen)
?coalescent.plot
Dataset <- read.csv('~/Desktop/Evolution/Project/pelvic_size_data.csv', stringsAsFactors=F)
setwd('C:\\Users\\Raza\\Desktop\\Evolution\\Project\\Project\\')
Data <- read.csv('pelvic_size_data.csv', stringsAsFactors=F)
Sum(dnorm(40:55,30.5,6.7))
sum(dnorm(40:55,30.5,6.7))
test<-simPop(nGenerations=21,h=0,s=1)
library(learnPopGen)
test<-simPop(nGenerations=21,h=0,s=1)
library(learnPopGen)
test<-simPop(nGenerations=21,h=0,s=1)
test<-simPop(popsize=177,nGenerations=21,h=0,s=1)
install.packages("learnPopGen")
install.packages("learnPopGen")
learnPopGen
library(learnPopGen)
test<-simPop(popsize=177,nGenerations=21,h=0,s=1)
plotFit(nruns=3, n=50,ngens=21,init_p=0.5,h=0,s=1)
source("http://jonsmitchell.com/code/fxn05.R")
test<-simPop(popsize=177,nGenerations=21,h=0,s=1)
test<-simPop(nGenerations=21,h=0,s=1)
test
plotFit(nruns=3, n=50,ngens=21,init_p=0.5,h=0,s=1)
plotFit(nruns=4, n=50,ngens=21,init_p=0.5,h=0,s=1)
plotFit(nruns=3, n=50,ngens=21,init_p=0.5,h=0,s=1)
plotFit(nruns=3, n=177,ngens=21,h=0,s=1)
test<-simPop(nGenerations=21,h=0,s=1)
111.2*21
source ("http://jonsmitchell.com/code/reformatData07.R")
source ("http://jonsmitchell.com/code/simFxn.R")
plot (1, 1, type ="n", xlim=c(1998, 2013), ylim=c(0, 1))
s <- apply (overallFreq, 2, function(x) lines(overallFreq[,1], x, col=rgb(0, 0, 0, 0.01)))
rescaleFreq <- apply (overallFreq[,3:ncol(overallFreq)], 2, function(x) x - x[1])
plot (1, 1, type="n", xlim=c(1998, 2013), ylim=c(-0.25, 0.25))
plot (1, 1, type ="n", xlim=c(1998, 2013), ylim=c(0, 1))
s <- apply (overallFreq, 2, function(x) lines(overallFreq[,1], x, col=rgb(0, 0, 0, 0.01)))
rescaleFreq <- apply (overallFreq[,3:ncol(overallFreq)], 2, function(x) x - x[1])
rescaleFreq <- apply (overallFreq[,3:ncol(overallFreq)], 2, function(x) x - x[1])
plot (1, 1, type ="n", xlim=c(1998, 2013), ylim=c(0, 1))
s <- apply (overallFreq, 2, function(x) lines(overallFreq[,1], x, col=rgb(0, 0, 0, 0.01)))
rescaleFreq <- apply (overallFreq[,3:ncol(overallFreq)], 2, function(x) x - x[1])
plot (1, 1, type="n", xlim=c(1998, 2013), ylim=c(-0.25, 0.25))
s <- apply (rescaleFreq, 2, function(x) lines(overallFreq[,1], x, col=rgb(0,0,0,0.01)))
dYear <- c()
dAlleles <- c()
for (i in 3:ncol (overallFreq)) {
dYear <- c(dYear, overallFreq[,1])
Vec <- overallFreq[,i]
Init <- overallFreq[1, i]
dAlleles <- c(dAlleles, Vec - Init)
}
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100)
### Experimenting with different nbin values.
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=10)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=50)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=5)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=500)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=500)
### Experimenting with different nbin values.
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=20)
### Experimenting with different nbin values.
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=40)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=80)
### Experimenting with different nbin values.
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=40)
### Experimenting with different nbin values.
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=10)
### Experimenting with different nbin values.
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=40)
###
addFit(10)
###
addFit(100)
?addFit
?addFit
helpaddFit
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit (nruns=50, n=100, ngens=18, startT=1997, simCol="gray40", rescale=TRUE)
addFit (nruns=1, n=100, ngens=18, startT=1997, simCol="gray40", rescale=TRUE)
addFit (nruns=1, n=18, ngens=18, startT=1997, simCol="gray40", rescale=TRUE)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit (nruns=1, n=18, ngens=18,s=0, h=1, startT=1997, simCol="gray40", rescale=TRUE)
addFit (nruns=1, n=18, ngens=18,s=0, h=0.5, startT=1997, simCol="gray40", rescale=TRUE)
addFit (nruns=1, n=18, ngens=18,s=0, h=0.5, startT=1997, simCol="gray40", rescale=TRUE)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit (nruns=20, n=18, ngens=18,s=0, h=0.5, startT=1997, simCol="gray40", rescale=TRUE)
addFit (nruns=20, n=18, ngens=1,s=0, h=0.5, startT=1997, simCol="gray40", rescale=TRUE)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit (nruns=20, n=18, ngens=1,s=0, h=0.5, startT=1997, simCol="gray40", rescale=TRUE)
addFit (nruns=20, n=1, ngens=10,s=0, h=0.5, startT=1997, simCol="gray40", rescale=TRUE)
addFit (nruns=20, n=10, ngens=10,s=0, h=0.5, startT=1997, simCol="gray40", rescale=TRUE)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit (nruns=20, n=18, ngens=10,s=0, h=0.5, startT=1997, simCol="gray40", rescale=TRUE)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit (nruns=20, n=18, ngens=18,s=1, h=0.5, startT=1997, simCol="gray40", rescale=TRUE)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit (nruns=20, n=18, ngens=18,s=1, h=1, startT=1997, simCol="gray40", rescale=TRUE)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit (nruns=20, n=18, ngens=18,s=0, h=1, startT=1997, simCol="gray40", rescale=TRUE)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit (nruns=20, n=10, ngens=18,s=0, h=0, startT=1997, simCol="gray40", rescale=TRUE)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit (nruns=20, n=100, ngens=18,s=0, h=0, startT=1997, simCol="gray40", rescale=TRUE)
plot (alleleFreqs$d_freq, alleleFreqs$d_imm, xlim=c(-0.15, 0.15), xlab="overall freq. change", ylab="freq. change in subset")
points (alleleFreqs$d_freq, alleleFreqs$d_birth, col='blue')
points (alleleFreqs$d_freq, alleleFreqs$d_surv, col='red')
plot (alleleFreqs$d_freq, alleleFreqs$d_birth, xlim=c(-0.15, 0.15), ylim=c(-1, 1), xlab="overall freq. change", ylab="freq. change in subset")
points (alleleFreqs$d_freq, alleleFreqs$d_imm, col='blue')
points (alleleFreqs$d_freq, alleleFreqs$d_surv, col='red')
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit (nruns=10, n=500, ngens=18,s=0, h=0, startT=1997, simCol="gray40", rescale=TRUE)
addFit (nruns=10, n=500, ngens=18,s=0, h=0.5, startT=1997, simCol="gray40", rescale=TRUE)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit (nruns=10, n=250, ngens=18,s=0, h=0.5, startT=1997, simCol="gray40", rescale=TRUE)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit (nruns=10, n=250, ngens=18,s=0.1, h=0.5, startT=1997, simCol="gray40", rescale=TRUE)
addFit (nruns=20, n=250, ngens=18,s=0.1, h=0.5, startT=1997, simCol="gray40", rescale=TRUE)
addFit (nruns=20, n=25, ngens=18,s=0.1, h=0.5, startT=1997, simCol="gray40", rescale=TRUE)
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
dYear <- c(dYear, overallFreq[,1])
addFit (nruns=20, n=250, ngens=18,s=0, h=0.5, startT=1997, simCol="gray40", rescale=TRUE)
###
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit (nruns=50, n=100, ngens=18 startT=1997, simCol="gray40", rescale=TRUE)
###
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
###
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
smoothScatter (dYear, dAlleles, colramp=Pal, nbin=100)
library("treebase")
Dolphins <- search_treebase("Delphinus", by='taxon', max_trees = 10)
WillWork <- sapply(Dolphins, function(x) try(is.ultrametric(x)))
which(WillWork == TRUE)
pdf('DolphinPhylo.pdf', height =5, width=5)
DolphinPlot <- plot.phylo(Dolphins[[9]], cex = 0.35)
dev.off()
is.ultrametric(Dolphins[[7]])
bddolphin <- fit.bd(Dolphins[[7]], rho = 0.2)
bddolphin
Tigers <- search_treebase("tigris", by='taxon', max_trees=3)
WillWork <- sapply(Tigers, function(x) try(is.ultrametric(x)))
WillWork
pdf('TigerPhylo.pdf', height =5, width=5)
TigersPlot <- plot.phylo(Tigers[[2]], cex=0.1)
dev.off()
bdtigers <- fit.bd(Tigers[[2]], rho = 0.2)
bdtigers
Warblers <- search_treebase("Basileuterus", by='taxon', max_trees=20)
length(Warblers)
pdf('WarblerPhylo.pdf', height =5, width=5)
WarblersPlot <- plot.phylo(Warblers[[1]], cex=0.35)
dev.off()
WillWork <- sapply(Warblers, function(x) try(is.ultrametric(x)))
WillWork
bdwarblers <- fit.bd(Warblers[[1]], rho =0.2)
bdwarblers
Elephants <- search_treebase('elephas', by='taxon', max_trees=25)
pdf('ElephantsPhylo.pdf', height =5, width=5)
ElephantsPlot <- plot.phylo(Elephants[[12]], cex=0.35)
dev.off()
WillWork <- sapply(Elephants, function(x) try(is.ultrametric(x)))
which(WillWork == TRUE)
fit.bd(Elephants[[12]], rho = 0.2)
Capybara <- search_treebase('Hydrochoerus', by='taxon', max_trees=25)
setwd('C:\\users\\Raza\\Desktop\\Evolution\\Tasks\\Task_08')
library('phytools')
library('ape')
library('maps')
library('phytools')
tree <- read.tree('https://jonsmitchell.com/data/anolis.tre')
plot(tree, type='fan')
plot(tree, type='fan')
tree$tip.label
tree$edge.length
data <- read.csv('https://jonsmitchell.com/data/svl.csv', stringsAsFactors=F, row.names=1)
data
data[,1]
type(data)
class(data)
dim(data)
### 82 1
nrow(data)
### 82 1
nrow(data)
tree$edge.length
nrow(data)
### 82
ncol(data)
data
svl <- setNames(data$svl, rownames(data))
svl
class(svl)
str(data)
str(data)
typeof(data)
list(svl)
list(svl)
typeof(svl)
is.character(svl)
Ancestors <- fastAnc(tree, svl, vars=TRUE, CI=TRUE)
Ancestors
Ancestors
?fastAnc
par(mar=c(0.1,0.1,0.1,0.1))
plot(tree, type='fan', lwd=2, show.tip.label=F)
tiplabels(pch=16, cex=0.25*svl[tree$tip.label])
nodelabels(pch=16, cex=0.25*Ancestors$ace)
obj <- contMap(tree, svl, plot=F)
plot(obj, type='fan', legend=0.7*max(nodeHeights(tree)), sig=2, fsize=c(0.7, 0.9))
fossilData <- data.frame(svl=log(c(25.4, 23.2, 17.7, 19.7, 24, 31)), tip1=c('Anolis_aliniger', 'Anolis_aliniger', 'Anolis_occultus', 'Anolis_ricordii', 'Anolis_cristatellus', 'Anolis_occultus' ), tip2=c('Anolis_chlorocyanus', 'Anolis_coelestinus', 'Anolis_hendersoni', 'Anolis_cybotes', 'Anolis_angusticeps', 'Anolis_angusticeps'))
fossilData
?fastMRCA
{
for(i in 1:nrow(fossilData))
i <- 1
if( i == 1) {
print(Ancestors)
}
}
fossilNodes <- c()
nodeN <- c()
Node <- fastMRCA(tree, fossilData[i, 'tip1'], fossilData[i, 'tip2'])
Node
fossilNodes[i] <- fossilData[i, 'svl']
fossilNodes[i]
nodeN[i] <- Node
names(fossilNodes) <- nodeN
Ancestors_withFossils <- fastAnc(tree, svl, anc.states=fossilNodes, CI=TRUE, var=TRUE)
Ancestors_withFossils
Ancestors_withoutFossils <- fastAnc(tree, svl, CI=TRUE, var=TRUE)
Ancestors_withoutFossils
plot(Ancestors_withFossils$ace, Ancestors_withoutFossils$ace, xlab = 'with fossils' , ylab = 'without fossils')
plot(Ancestors_withFossils$ace, Ancestors_withoutFossils$ace, xlab ="with fossils", ylab ="without fossils")
Ancestors_withFossils$ace
Ancestors_withoutFossils$ace
plot(Ancestors_withFossils$ace, Ancestors_withoutFossils$ace, xlab ="with fossils", ylab ="without fossils")
plot(Ancestors_withFossils$ace, Ancestors_withoutFossils$ace,xlab="with fossils",ylab="without fossils", pch=16, cex=1.3, col='red')
plot(Ancestors_withFossils$ace, Ancestors_withoutFossils$ace,xlab="with fossils",ylab="without fossils", pch=16, cex=1.3, col='orange')
plot(Ancestors_withFossils$ace, Ancestors_withoutFossils$ace,xlab="with fossils",ylab="without fossils", pch=16, cex=1, col='orange')
plot(Ancestors_withFossils$ace, Ancestors_withoutFossils$ace,xlab="with fossils",ylab="without fossils", pch=12, cex=1, col='orange')
library('geiger')
?fitContinuous
fitContinuous(tree, svl, model='BM')
fitContinuous(tree, svl, model='OU')
fitContinuous(tree, svl, model="BM")
fitContinuous(tree, svl, model="OU")
fitContinuous(tree, svl, model="EB")
### 	AIC = -7.235181
fitContinuous(tree, svl, model="kappa")
### 	AIC = -4.512019
fitContinuous(tree, svl, model="rate_trend")
?fastAnc
?fitContinuous
?fastAnc
