plot(t)
t<- pbtree(b=14, d=01,n=100)
plot(t)
t<- pbtree(b=14, d=5,n=100)
plot(t)
t<- pbtree(b=2, d=5,n=100)
plot(t)
t<- pbtree(b=200, d=5,n=100)
plot(t)
t<- pbtree(b=200, d=100,n=100)
plot(t)
t<- pbtree(b=200, d=0,n=100)
plot(t)
t<- pbtree(b=200, d=1,n=100)
plot(t)
t<- pbtree(b=2, d=1,n=100)
plot(t)
?pbtree
library(phytools)
trees<-vector("list",1)
trees
births<-c()
births
fractions<-c()
fractions
?pbtree
for(i in 1:100) {
births[i]<- sample(1:100,1)
fractions[i]<- sample(1:100,1)
trees <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
bindtree<-bind.tree(trees[i])
}
trees<-vector("list",1)
trees
births<-c()
births
fractions<-c()
fractions
?pbtree
for(i in 1:100) {
births[i]<- sample(1:100,1)
fractions[i]<- sample(1:100,1)
trees <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
bindtree<-bind.tree(trees[i], trees[i])
}
str(trees)
plot(bindtree)
plot(trees)
for(i in 1:100) {
births[i]<- sample(1:100,1)
fractions[i]<- sample(1:100,1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
bindtree<-bind.tree(trees[i], trees[i])
}
for(i in 1:100) {
births[i]<- sample(1:100,1)
fractions[i]<- sample(1:100,1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
#  bindtree<-bind.tree(trees[i], trees[i])
}
plot(trees[[1]])
plot(trees[[2]])
sapply(trees, length)
sapply(trees, Ntip)
sapply(trees, Ntip)
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
#  bindtree<-bind.tree(trees[i], trees[i])
}
str(trees)
plot(trees[[2]])
sapply(trees, Ntip)
for(i in 1:100) {
births[i]<- runif(1,0,100)
fractions[i]<- runif(1,0,100)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
}
str(trees)
plot(trees[[2]])
for(i in 1:100) {
births[i]<- runif(1,0,100)
fractions[i]<- runif(1,0,100)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
}
str(trees)
sapply(trees, Ntip)
runif(1,0,100)
runif(1,0,100)
runif(1,0,100)
runif(1)
runif(1,0,100)
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
}
sapply(trees, Ntip)
plot(trees[[2]])
plot(trees[[1]])
plot(trees[[10]])
plot(trees[[100]])
Ntip(trees)
plot(trees[100])
plot(trees[[100]])
plot(trees[[5]])
trees$tip.label
trees[[i]]$tip.label
trees[[2]]$tip.label
r<- (births[i]- (fractions[i]*births[i]))
plot(r, Ntip)
r
r[i]<- (births[i]- (fractions[i]*births[i]))
r
plot(r, Ntip)
Ntip
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
}
str(trees)
plot(trees[[5]])
trees[[2]]$tip.label
### Question 4
tips<-sapply(trees, Ntip)
diversification<- sapply(trees,r)
diversification<- sapply(trees,r[[i]])
r
plot(r, Ntip)
plot(r, tips)
fit.bd<-birthdeath(trees)
library(phytools)
fit.bd<-birthdeath(trees)
fit.bd<-birthdeath(trees[[i]])
### Question 5
births
trees<-vector("list",1)
trees
births<-c()
births
fractions<-c()
fractions
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
}
str(trees)
plot(trees[[5]])
trees[[2]]$tip.label
library(phytools)
trees<-vector("list",1)
trees
births<-c()
births
fractions<-c()
fractions
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
}
str(trees)
plot(trees[[5]])
trees[[2]]$tip.label
library(phytools)
trees<-vector("list",1)
births<-c()
fractions<-c()
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
}
trees<-vector("list",1)
births<-c()
fractions<-c()
r<-c()
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
}
plot(trees[[5]])
str(trees)
s<-()
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
s[[i]]<-births[i]
}
str(trees)
s<-c()
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
s[[i]]<-births[i]
}
?sapply
plot(r, tips)
trees<-vector("list",1)
births<-c()
fractions<-c()
r<-c()
s<-c()
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
s[[i]]<-births[i]
}
str(trees)
plot(trees[[5]])
trees[[2]]$tip.label
?sapply
### Question 4
tips<-sapply(trees, Ntip)
plot(r, tips)
plot(r, tips)
abline()
?abline
plot(r, tips)
abline(tips, r)
abline(r, tips)
abline(r, tips)
abline(r, tips)
plot(r, tips)
abline(r, tips)
tips
trees[[2]]$tip.label
trees[[1]]$tip.label
trees[[99]]$tip.label
trees[[100]]$tip.label
### Question 5
plot(trees, type="fan")
### Question 5
plot(trees[[5]], type="fan")
tips<-log(sapply(trees, Ntip))
tips
plot(r, tips)
plot(r, tips, xlab= diversification, ylab= log of number of tips)
plot(r, tips, xlab= "diversification, ylab= "log of number of tips")
plot(r, tips, xlab= "diversification", ylab= "log of number of tips")
?plot
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=16)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=21)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=13)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=9)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=15)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=16)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=17)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="black", pch=18)
plot(r, tips, xlab= "diversification", ylab= "log of number of tips", col="orange", pch=18)
lm(formula = tips ~ r)
abline(lm(tips ~ r))
r
tips
plot(tips,r, xlab= "diversification", ylab= "log of number of tips", col="orange", pch=18)
plot(tips,r, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
abline(lm(tips ~ r))
cor(tips,r)
r1<-unlist(r)
plot(tips,r1, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
cor(tips,r1)
plot(tips,r1, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
abline(lm(tips ~ r1))
plot(tips,r1, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
abline(lm(tips ~ r1))
lm(tips ~ r1))
lm(tips ~ r1)
abline(3.191, 2.717)
plot(tips,r1, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
abline(3.191, 2.717)
s1<-unlist(s)
s1
compute.brlen(trees)
class(trees)
trees$edge.length
trees<-vector("list",1)
births<-c()
fractions<-c()
r<-c()
s<-c()
branch<-c()
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
s[[i]]<-births[i]
branch[[i]]<-trees[[i]]$edge.length
}
branch
trees<-vector("list",1)
births<-c()
fractions<-c()
r<-c()
s<-c()
branch<-c()
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
s[[i]]<-births[i]
branch[[i]]<-mean(trees[[i]]$edge.length)
}
branch
plot(branch,s1, xlab="Average branch length" , ylab= "speciaiton rate", col="orange", pch=18)
library(phytools)
trees<-vector("list",1)
births<-c()
fractions<-c()
r<-c()
s<-c()
branch<-c()
?pbtree
for(i in 1:100) {
births[i]<- runif(1)
fractions[i]<- runif(1)
trees[[i]] <- pbtree(b=births[i], d=(fractions[i]*births[i]),n=100)
r[[i]]<- (births[i]- (fractions[i]*births[i]))
s[[i]]<-births[i]
branch[[i]]<-mean(trees[[i]]$edge.length)
}
str(trees)
plot(trees[[5]])
trees[[100]]$tip.label
?sapply
### Question 4
tips<-log(sapply(trees, Ntip))
tips
r1<-unlist(r)
plot(tips,r1, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
abline(lm(tips ~ r1))
cor(tips,r1)
### Question 5
s1<-unlist(s)
branch
plot(branch,s1, xlab="Average branch length" , ylab= "speciaiton rate", col="orange", pch=18)
abline(lm(branch ~ s1))
cor(branch,s1)
plot(branch,s1, xlab="Average branch length" , ylab= "speciaiton rate", col="orange", pch=18)
plot(branch,s1, xlab="Average branch length" , ylab= "speciaiton rate", col="orange", pch=1)
branch <-unlist(branch)
abline(lm(branch ~ s1))
cor(branch,s1)
plot(branch,s1, xlab="Average branch length" , ylab= "speciaiton rate", col="orange", pch=1)
sapply(trees, Ntips)
sapply(trees, Ntip)
### Question 7
Tree<-trees[[14]]
plot(Tree)
rates<-c()
traits<-vector("list",1)
rates<-c()
traits<-vector("list",1)
for(i in 1:100) {
rates[i]<- runif(1)
traits[[i]]<-fastBM(tree = Tree, sig2 = rates[i])
}
traits
rates
births
plot(tips,births, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
plot(tips,(births*fractions), xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
plot(tips,r, xlab="log of number of tips" , ylab= "diversification", col="orange", pch=18)
plot(mean(traits),rates)
mean(traits)
traits
mean(traits)
class(traits)
traits<-unlist(traits)
class(traits)
traits
mean(traits)
for(i in 1:100) {
rates[i]<- runif(1)
traits[[i]]<-fastBM(tree = Tree, sig2 = rates[i])
traits1[[i]]<-mean(traits[[i]])
}
plot(Tree)
rates<-c()
traits<-vector("list",1)
for(i in 1:100) {
rates[i]<- runif(1)
traits[[i]]<-fastBM(tree = Tree, sig2 = rates[i])
traits1[[i]]<-mean(traits[[i]])
}
traits1<-c()
for(i in 1:100) {
rates[i]<- runif(1)
traits[[i]]<-fastBM(tree = Tree, sig2 = rates[i])
traits1[[i]]<-mean(traits[[i]])
}
traits1
plot(traits1, rates)
rates<-c()
traits<-vector("list",1)
meantraits<-c()
for(i in 1:100) {
rates[i]<- runif(1)
traits[[i]]<-fastBM(tree = Tree, sig2 = rates[i])
meantraits[[i]]<-mean(traits[[i]])
}
plot(mean(traits),rates)
traits<-unlist(traits)
class(traits)
traits1
plot(meantraits, rates)
cor(meantraits, rates)
meantraits<-unlist(meantraits)
cor(meantraits, rates)
plot(meantraits, rates)
rates<-c()
traits<-vector("list",1)
meantraits<-c()
vartraits<-c()
for(i in 1:100) {
rates[i]<- runif(1)
traits[[i]]<-fastBM(tree = Tree, sig2 = rates[i])
meantraits[[i]]<-mean(traits[[i]])
vartraits[[i]]<-var(traits[[i]])
}
plot(mean(traits),rates)
traits<-unlist(traits)
class(traits)
traits1
vartraits<-unlist(meantraits)
plot(vartraits, rates)
cor(vartraits, rates)
cor(traits[[1]], traits[[2]])
### Question 10
cor(traits[1], traits[2])
trait[1]
traits[1]
traits[2]
traitMat<-cbind(traits[[1]], traits[[4]])
traitMat
traitMat<-cbind(traits[[1]], traits[[2]])
traitMat
cor(vartraits, rates)
cor(meantraits, rates)
meantraits<-unlist(meantraits)
cor(meantraits, rates)
vartraits<-unlist(vartraits)
cor(vartraits, rates)
### Question 7
which.max(trees)
### Question 7
which.max(Ntips)
### Question 7
which.max(tips)
Tree<-trees[[which.max(tips)]]
plot(Tree)
rates<-c()
traits<-vector("list",1)
meantraits<-c()
vartraits<-c()
for(i in 1:100) {
rates[i]<- runif(1)
traits[[i]]<-fastBM(tree = Tree, sig2 = rates[i])
meantraits[[i]]<-mean(traits[[i]])
vartraits[[i]]<-var(traits[[i]])
}
plot(mean(traits),rates)
traits<-unlist(traits)
class(traits)
### Question 8
meantraits<-unlist(meantraits)
plot(meantraits, rates)
cor(meantraits, rates)
install.packages(ids)
install.packages("ids")
library(ids)
Relabel <- adjective_animal(31, max_len=c(10,15))
Relabel
Relabel <- adjective_animal(31, max_len=c(10,15))
Relabel
Relabel <- adjective_animal(31, max_len=c(10,15))
Relabel
len<-c(0.1,.2,.3,.4,.5,.6,.7,.8,.9,1.0,1.1,1.2,1.3,1.4,1.5)
pi<-3.14
g<-9.8
time<-(2*pi)*(len/g)^0.5
time
setwd('C:\\users\\Raza\\Desktop\\Evolution\\Tasks\\Physics Pendulum lab')
pdf("Length vs time (Pendulum)", height =4, width = 4)
plot(len, time, xlab="Length (m)", ylab="Time (s)", col="red")
### Exponential relation observed.
dev.off()
